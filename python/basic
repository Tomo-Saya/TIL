# \について
  \n：改行
  \t：タブ
  \：エスケープ、次の\を文字列として見る
    例：print('I\'m fine')

# 変数の命名規則(naming convention)
  snake_case
  文字から始まる
  文字、数字、_を使う
  Case sensitive(Helloとhelloは別の変数)

# .format()
  "文字列{field1}{field2}{field3}...".format(値1, 値2, 値3...)
  フォーマットフィールド(field)の記述方法は3通り
  ①フォーマットフィールドに引数のインデックスを記述
    "spam: {0}, ham: {1}, eggs: {2}".format(x, y, z) 引数のインデックスをフォーマットフィールドに記述することで、該当する値を文字列に埋め込む
  ②空のフォーマットフィールドを使う
    "spam: {}, ham: {}, eggs: {}".format(x, y, z) 引数のインデックスは省略可能。その場合は 引数の値が順番に応じて埋め込まれる
  ③フォーマットフィールドにキーワード引数の名前を記述する
    "spam: {a}, ham: {b}, eggs: {c}".format(a=x, b=y, c=z) formatメソッドの引数をキーワード引数として与えた場合、フォーマットフィールドにはキーワード引数の名前を記述する

# fstring
  f"文字列{値: フォーマット指定子}"　フォーマット指定子はなくてもOK
    フォーマット指定子のオプションを追加することで、式の値に様々な書式を設定できる
  ・主なフォーマット指定子
    b: 値を2進数で出力
    d: 値を10進数で出力
    x: 値を16進数で出力
    f: 値を与えられた精度までの少数で出力（例：5fで少数第5位で丸める）
    %: 値を100倍し、パーセント記号がついた形式で出力

# type()
  type(オブジェクト)とすることで、オブジェクトのtypeを返す

# id()
  id(オブジェクト)とすることで、オブジェクトのidを返す

# Boolean型 (True:1/False:0)
  integer型のサブタイプ

# if文
  if 「条件文」:
     「処理」　←条件がTrueの時に実行
  else:
     「処理」　←条件がFalseの時に実行

# input(): ユーザーの入力した値（文字列）を取得する
  数字で入力した場合も文字列で返す点に注意

# list
  リスト(lists): 複数のオブジェクトを順序づけて保存するデータ型
  []で括って、,(カンマ)で各オブジェクトを区切る
  リスト内のオブジェクトは要素と呼ぶ
  リスト内の要素はインデックスで呼び出せる　
    例： fruits[0] 一番最初のオブジェクトは[0]で呼び出す。
        一番最後のオブジェクトは[-1]で呼び出す。
  .append: 新しいオブジェクトをリストの最後に追加する。
           リスト名.append(追加したいオブジェクト)
  .insert: 指定したindexに指定したオブジェクトを追加する。
           リスト名.insert(index, 追加したいオブジェクト)　引数にしたindexの前に追加される。
  .remove: マッチした最初のオブジェクトを除く
           リスト名.remove(除きたいオブジェクト)
  .sort: 昇順に並び替える
           リスト名.sort() 引数に「reverse=True」を与えることで、降順になる。
  len: リストの要素数を取得する
       len(リスト名)
       文字列の文字数を取得することも可能
  +演算子でリスト結合できる
    +はリスト内に要素を追加するが、
    appendの場合はリスト内にリストを追加することになる点が異なるので注意
  ・Slicing 「:」を使って、複数の要素を取ってくることができる。基本は[開始:未満]　文字列にも使用できる。
      例：リスト名[1:4]　index1~3までの要素を取ってくる（4未満）　後ろから数える場合、「-」で指定することも可能
        　リスト名[:4]  開始は省略すると、0からになる。
          リスト名[3:]  未満を省略すると、最後の要素まで取ってくる。
          リスト名[:]  全ての要素を取ってくる。
          リスト名[開始:未満:step]  開始から未満までをstep飛ばしで取得する。
          リスト名[::-1]  逆順になる。

# join / split
  .join(): 指定した文字列でリストを結合する。
    例："_".join(["Hi", "My", "name", "is", "John"]) Hi_My_name_is_John

  .split(): 指定した文字列で区切ってリストを返す。
    例："Hi/My/name/is/John".split("/")　デフォルトは半角スペースなので、半角スペースで区切る時は引数不要

# in
  リスト内に指定したオブジェクトがあるかどうかをTrue/Falseで返す
    例：fruits = ['apple', 'peach', 'grapes', 'banana'] 
      'apple' in fruits...True
      'lemon' in fruits...False
      'apple' not in fruits...False
      'lemon' not in fruits...True
    
