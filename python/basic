# \について
  \n：改行
  \t：タブ
  \：エスケープ、次の\を文字列として見る
    例：print('I\'m fine')

# 変数の命名規則(naming convention)
  snake_case
  文字から始まる
  文字、数字、_を使う
  Case sensitive(Helloとhelloは別の変数)

# .format()
  "文字列{field1}{field2}{field3}...".format(値1, 値2, 値3...)
  フォーマットフィールド(field)の記述方法は3通り
  ①フォーマットフィールドに引数のインデックスを記述
    "spam: {0}, ham: {1}, eggs: {2}".format(x, y, z) 引数のインデックスをフォーマットフィールドに記述することで、該当する値を文字列に埋め込む
  ②空のフォーマットフィールドを使う
    "spam: {}, ham: {}, eggs: {}".format(x, y, z) 引数のインデックスは省略可能。その場合は 引数の値が順番に応じて埋め込まれる
  ③フォーマットフィールドにキーワード引数の名前を記述する
    "spam: {a}, ham: {b}, eggs: {c}".format(a=x, b=y, c=z) formatメソッドの引数をキーワード引数として与えた場合、フォーマットフィールドにはキーワード引数の名前を記述する

# fstring
  f"文字列{値: フォーマット指定子}"　フォーマット指定子はなくてもOK
    フォーマット指定子のオプションを追加することで、式の値に様々な書式を設定できる
  ・主なフォーマット指定子
    b: 値を2進数で出力
    d: 値を10進数で出力
    x: 値を16進数で出力
    f: 値を与えられた精度までの少数で出力（例：5fで少数第5位で丸める）
    %: 値を100倍し、パーセント記号がついた形式で出力

# type()
  type(オブジェクト)とすることで、オブジェクトのtypeを返す

# id()
  id(オブジェクト)とすることで、オブジェクトのidを返す

# Boolean型 (True:1/False:0)
  integer型のサブタイプ

# if文
  if 「条件文」:
     「処理」　←条件がTrueの時に実行
  else:
     「処理」　←条件がFalseの時に実行



