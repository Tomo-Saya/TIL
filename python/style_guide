# 変数定義
# correct
x = 1
y = 1
# wrong
xxxx   = 1
y      = 1
x = 1

# 関数の引数 「=」にはスペース不要
# Correct
def complex(real, imag=0.0):
    return magic(r=real, i=imag)
# Wrong
def complex(real, imag = 0.0):
    return magic(r = real, i = imag)

# operatorの周りにスペースを入れる,operatorにpriorityがある場合はスペースをなくす
# correct
x = x + 1
x += 1
x = x*2 - 1
a = x*x + y+y
c =(a+1) *(a-1)

# wrong
x=x+1
x +=1
x = x * 2 - 1
a = x * x + y + y
c =(a + 1) *(a - 1)

# カンマの後にはスペースを入れる
# correct
range(1, 11)
a =[1, 2, 3, 4]
b = (1, 2, 3, 4)

# カンマの後に閉じカッコがくる場合はスペース不要
# correct
foo = (0,)

# wrong
foo = (0, )

# correct
FILES = [
    'setup.cfg',
    'tox.ini',
]

# wrong
FILES = ['setup.cfg', 'tox.ini',]

# 行の折り返し
foo = long_function_name(var_one, var_two,
                         var_three, var_four)

foo = long_function_name(
    var_one, var_two,
    var_three, var_four)

def long_function_name(
        var_one, var_two, var_three, var_four):
    print(var_one)

# '\'で区切って改行する
print("このように表示する文章が長かったりする場合は\
バックスラッシュで区切ると改行できます")

a = 10000000000000000000 \
    + 100000000000000000000 \
    + 100000000000000000 \
    + 1000000000

# 関数間は2行空ける
def func():
    pass


def func2():
    pass

# クラス内は1行空ける
class MyClass:
    def __init__(self):
        pass

    def method(self):
        pass

# importのstyle
import os
import sys

from subprocess import Popen, PIPE

# 順番
# 1.Standard library (time, sys
# 2.Third pirty (numpy, pandas)
# 3.Our library
# 4.Local library
# それぞれ一行空ける (abc順)

# absolute import
import mypkg.sibling
from mypkg import sibling
from mypkg.sibling import example

# コメント
# ・コメントは常に最新にする。コメントとコードの中身が異なるなら、コメントはない方がまし
# ・なるべく英語で書く、日本語が分かる人のみが読むなら日本語でもOK
# ・書くときは文章で書くのが望ましい
# ・# の後に半角スペースを入れる
# ・インラインコメントはコードの後に半角スペースを2つ入れて#を書く
# ・Docstringは基本的に全てのmodule, function, clss, methodにつける(non publicな外からアクセスしない関数には不要)
# ・そのコードが「何をしているか」より「なぜそう書いたか」を書く方が有益,WhatよりもWhyを書く

# アンダースコア
# - _xxx: internal use only(non public)の意味
# - xxx_: Pythonで既に使われている単語を使いたいとき(例：type_)
# - __xxx: クラスの属性として使うことで名前修飾される
# - __xxx__ : magic methodと呼ばれ、Pythonが特別に設定しているもの、開発者が定義することはない。(overrideすることはある)
# - _: 最近実行した戻り値や、iteration時に使わない変数

class MyClass:
    def __str__(self):
        pass

for _ in range(10):
    print("hello")

# l, I, O 一文字の変数は1や0に見間違えるので使わない

# Constants(宣言後に変更しない変数)は大文字のsnakecaseを使う
PI = 3.14

# Return
def foo(x):
    if x >= 0:
        return math.sprt(x)
    else:
        return None

# オブジェクトタイプの確認はisinstance()を使う
# correct
if isinstance(obj, int)
# wrong
if type(obj) is type(1)

# Booleanに比較演算子を使わない
bool_var = True
# correct
if bool_var:
# wrong
if bool_var == True

# type hint(type annotation)
def greeting(name: str) -> str:
    return "Hello + name"
# 一つでもhintをつけたら全てにつける
# Pythonがtypeのチェックをしてくれるわけではない
# Pythonは動的型付け言語であることを意識する
# type hintを強制したり、命名規約に入れるべきではない

# pycodestyle (Stylistic Lintの代表的なlinter)
# $pycodestyle <python script>
#   <python script>に対してinstallを実行 pip install pycodestyle
# よく使用するオプション
# --showcase-source
#  問題がある箇所のコードを表示する
# --show-pep8
#  該当するpep8の情報を表示する
# --statistics
#  統計のみ表示（通常-qqと併用）

# pyflakes (Logical Lintの代表的なlinter)

# flake8 (pycodestyleとpyflakes)のラッパーライブラリ
# pycodestyleのオプションを使用できる

# pylint (flake8より厳しいlinter)
