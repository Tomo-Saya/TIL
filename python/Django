# View関数
  ・Djangoでアプリを記述する場合、「views.py」というファイルに記述する。
  ・HTTPリクエストを受け取り、HTTPレスポンスを返します。
  ・View関数はあるURLに登録されていて、そのURLにブラウザーからアクセスされたときにDjangoサーバーが自動で呼び出す。
  ・テンプレートを利用して、View関数で取得した値などを使ってHTMLを動的に変更できる。
  例：
  def index(request):
	"""メイン画面."""
    return HttpResponse('<h1>野菜販売</h1>')
  # HttpResponse
  　・index View関数ではHttpResponseオブジェクトを返す。
  　・HttpResponseにはHttpResponse('文字列')のように文字列を渡すことで、ブラウザーに表示させる文字を指定できる。
    ーーー動作の流れーーー
    1.ブラウザーがトップページにアクセスする == WebアプリケーションにHTTPリクエストを送信する
    2.Djangoが設定とHTTPリクエストを読んで、自動で index View関数を呼び出す
    3.index View関数が HttpResponse() を返す
    4.HTTPレスポンスがブラウザーに返される
    5.ブラウザーが文字列を解析し、表示する
  # request
  　・View関数は第一引数にrequestという引数を受け取るように作成する。
  　・Djangoはブラウザーなどからアクセスされた情報を、このrequest変数にまとめて関数に渡す。
    ーーーrequestに含まれる値ーーー
    アクセスされているURL
    ブラウザーの種類やバージョン
    フォームから投稿されたデータ
  # TemplateResponse
  　・View関数からTemplateResponseを返せば、Djangoは自動でテンプレートからHTMLを生成し、ブラウザーなどに返す。
    ーーー値の渡し方ーーー
    第1引数: View関数の引数にある request
            TemplateResponseの仕様上、必ず指定する必要がある。
    第2引数: テンプレートへのパス
    第3引数: 辞書（コンテキスト）

# テンプレート
  ・Djangoでは、ブラウザーに表示される見た目と、サーバー側の計算（プログラミング）を分けるために、テンプレートを利用する。
  ・テンプレートを利用することで作業の分業やサーバー側の値を表示することが容易になり、表示項目も確認しやすくなる。
  ・Form
    ・{{ form.as_p }}と記述するとコメント入力用フォームが表示される。
    ・Webにおける攻撃手法の1つであるクロスサイトリクエストフォージェリ（CSRF）対策をDjangoは提供している。
      <form>タグ内にcsrf_tokenテンプレートタグ（{% csrf_token %}）を記述しておく。
    
# モデル
  ・Djangoでデータを扱うには、モデルを利用する。
  ・Djangoを利用する場合、モデルを利用することにより利用しているデータベースを意識せずにデータを利用できる。
  ・1つのモデルはデータベースの1つのテーブルに紐付く。モデルを利用して、テーブルからデータを読み取る。
  ・.objects.all()
    models.pyに定義されているクラス<クラス名>からデータベースのテーブルに保存されている値を取り出せる。
    全てのデータを取得する場合、<クラス名>.objects.all()と書く。
  ・オブジェクトの各要素は<オブジェクト名>.<要素名>で取得できる。
  ・order_by
    データ取得時にorder_by('カラム名')を利用すると、取得データをソートできる。カラム名は文字列として指定する。
    カラム名の前にハイフン（-）を書くと降順、なにも書かないと昇順になる。
　・.objects.filter()
    条件を指定できる。等号を用いて、指定されたフィールドが指定された値と等しい場合の取得もできる。
    複数の条件がある場合は、条件をカンマで区切る。
  ・<モデル名>.objects.create(追加要素=値, 追加要素=値...)
    モデル経由でデータを追加する場合。
  
# View関数でのフォーム利用手順
  1.データが送られてきているか判断（request.methodがPOSTか）し、データがない場合はデータと紐付かないフォームインスタンスを生成し、テンプレートに渡す。
  2.データがある場合は、request.POSTを使ってデータと紐づくフォームインスタンスを作成する。
  3.入力項目をバリデーションする。
  4.データに問題がなければ、データを保存する。
  ・form.save()
    データ保存に利用する。フォームインスタンスに紐付いているデータが新規のデータの場合、データをデータベースに追加する。
