# 分の終わりには「;」を付ける。

# コメントアウトは「//」を付ける。

# 出力
  System.out.println()

# 変数の定義
  命名規則：キャメルケース
  1.データ型を指定する。
  2.変数の名前を決める。
  例：String name;
      name = "Tomoya";
  3.変数の定義と値の代入は同時に行うことができる。（変数の初期化）
  例：int number = 10;
      String text = "Hello World";
  4.変数の上書きを行うときはデータ型を付けない。
  例：text = "Good Morning";
  5.整数…int型
    小数…double型

# キャスト（強制的な型変換）
  例：int型の計算結果をdoubleで表示する場合
      int number1 = 13;
      int number2 = 4;
      System.out.println((double)number1 / number2);

# if / else if / else
  if (条件式) {
    処理;
  } else if (条件式) {
    処理;
  } else {
    処理;
  }
  {}（ブロック）を使用して複数の処理をまとめる。
  条件式にはメソッド（引数）が入ることもある。

# switch
  switch (条件の値) {
    case 値1:
      処理;
      break;
    case 値2:
      処理;
      break;
    case 値3:
      処理;
      break;
    default:
      処理;
      break;
  }
  1.breakはswitch文を終了させる命令のこと。
    breakがないと、合致したcaseの処理を行った後、その次のcaseも処理してしまう。
    switch文には必ずbreakを入れる。
  2.defaultはif文のelseの様な働きをする。

# while
  while (条件) {
    繰り返す処理;
  } 

# for
  for (変数の初期化;条件式;変数の更新) {
  処理
  }
  1.拡張for文（配列用のfor文）
    for (データ型 変数名 : 配列名) {
      繰り返す処理;
    }

# break / continue
  break: if文などと組み合わせることで、任意の個所で繰り返し処理を終了させることができる。
  continue: if文などと組み合わせることで、その条件の周の時だけ処理をスキップして次の周を実行する。

# 配列
  1.配列型の変数に配列を代入する。
    int型の場合： int[]配列名 = {配列の中身};
    String型の場合： String[]配列名 = {配列の中身};
  2.配列の各要素の取得方法
    配列名[インデックス番号]
  3.配列の各要素は変数のように代入することができる。
    配列名[インデックス番号] = 変更内容;
  4.配列では存在しない要素に値を代入はすることはできない。
    （存在しないインデックス番号に代入できない。）

# メソッド
  1.メソッドの定義
  public static void メソッド名(データ型 変数名) {
  実行する処理;
  }
  ・voidは戻り値がないという意味
    戻り値のあるメソッドの定義
    public static 戻り値のデータ型　メソッド名（引数）{
      return 戻り値;
    }
  2.メソッドの呼び出し
  メソッド名()
  3.処理をまとめた部品と考える。
  4.クラス内に定義する。
  5.引数の型や個数が違う場合は同盟のメソッドを定義することができる。（オーバーロード）

# クラス
  1.1つのクラスは同名のファイルに記述する。
    クラス名の頭文字は大文字（ファイル名も同様）
  2.クラスの定義
  class クラス名 {
    メソッド定義
  }

# 外部ライブラリ
  1.Scannerの使用方法
  Scanner scanner = new Scanner(System.in);
  受け取り方法
  文字列：String 変数名 = scanner.next();
  整数  ：int 変数名 = scanner.nextInt();
  小数  ：double 変数名 = scanner.nextDouble();

# インスタンス
  1.クラスからインスタンスを生成
    new クラス名()
